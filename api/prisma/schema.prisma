generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

model Appointments {
  appointment_id   Int           @id @default(autoincrement())
  active           Boolean       @default(false)
  appointment_date DateTime      @db.Timestamp(6)
  comments         String        @db.VarChar(1000)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  created_by       String        @db.VarChar(50)
  updated_at       DateTime      @updatedAt @db.Timestamp(6)
  updated_by       String        @db.VarChar(50)
  patient_id       Int
  medical_staff_id Int
  patients         Patients      @relation(fields: [patient_id], references: [patient_id], map: "appointments_patients_fk")
  medical_staff    Medical_staff @relation(fields: [medical_staff_id], references: [medical_staff_id])

  @@unique([medical_staff_id, patient_id])
  @@map("appointments")
}

model Assessments {
  assessment_id Int       @id @default(autoincrement())
  active        Boolean   @default(true)
  comments      String    @db.VarChar(1000)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  created_by    String    @db.VarChar(50)
  patient_id    Int       @unique
  answers       Answers[]
  patients      Patients  @relation(fields: [patient_id], references: [patient_id], map: "assessments_patients_fk")

  @@map("assessments")
}

model Patients {
  patient_id   Int            @id @unique
  appointments Appointments[]
  assessments  Assessments?
  users        Users          @relation(fields: [patient_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients")
}

model Users {
  user_id       Int            @id @default(autoincrement())
  name          String         @db.VarChar(50)
  address       String         @db.VarChar(200)
  date_of_birth DateTime       @db.Date
  phone_number  String         @db.VarChar(20)
  role          String         @db.VarChar(50)
  email         String         @unique @db.VarChar(50)
  password      String         @db.VarChar(100)
  created_at    DateTime       @default(now()) @db.Timestamp(6)
  updated_at    DateTime       @updatedAt @db.Timestamp(6)
  manager       Manager?
  medical_staff Medical_staff?
  patients      Patients?

  @@map("users")
}

model Answers {
  answer_id     Int         @id @default(autoincrement())
  question      Int
  answer        String      @db.VarChar(1000)
  assessment_id Int
  assessments   Assessments @relation(fields: [assessment_id], references: [assessment_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("answers")
}

model Manager {
  manager_id Int   @id @unique
  users      Users @relation(fields: [manager_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("manager")
}

model Medical_staff {
  medical_staff_id Int            @id @unique
  license_number   String         @db.VarChar(50)
  active           Boolean        @default(false)
  type             String         @db.Char(1)
  appointments     Appointments[]
  users            Users          @relation(fields: [medical_staff_id], references: [user_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("medical_staff")
}
